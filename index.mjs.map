{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/zaxpy.js","../lib/main.js","../lib/index.js","../09c1e3318a738b51cebbecf7fc4102"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided-base-reinterpret-complex128';\nimport { assign as muladd } from '@stdlib/complex-float64-base-mul-add';\nimport real from '@stdlib/complex-float64-real';\nimport imag from '@stdlib/complex-float64-imag';\nimport dcabs1 from '@stdlib/blas-base-dcabs1';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision complex floating-point constant and adds the result to a double-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128} alpha - scalar constant\n* @param {Complex128Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {integer} offsetX - starting index for `x`\n* @param {Complex128Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {integer} offsetY - starting index for `y`\n* @returns {Complex128Array} second input array\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n* import Complex128 from '@stdlib/complex-float64-ctor';\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = new Complex128( 2.0, 2.0 );\n*\n* zaxpy( 3, alpha, x, 1, 0, y, 1, 0 );\n* // y => <Complex128Array>[ -1.0, 7.0, -1.0, 15.0, -1.0, 23.0 ]\n*/\nfunction zaxpy( N, alpha, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar re;\n\tvar im;\n\tvar i;\n\n\tif ( N <= 0 || dcabs1( alpha ) === 0.0 ) {\n\t\treturn y;\n\t}\n\tre = real( alpha );\n\tim = imag( alpha );\n\tviewX = reinterpret( x, 0 );\n\tviewY = reinterpret( y, 0 );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tmuladd( re, im, viewX[ ix ], viewX[ ix+1 ], viewY[ iy ], viewY[ iy+1 ], viewY, 1, iy ); // eslint-disable-line max-len\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default zaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision complex floating-point constant and adds the result to a double-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128} alpha - scalar constant\n* @param {Complex128Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Complex128Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {Complex128Array} second input array\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n* import Complex128 from '@stdlib/complex-float64-ctor';\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = new Complex128( 2.0, 2.0 );\n*\n* zaxpy( 3, alpha, x, 1, y, 1 );\n* // y => <Complex128Array>[ -1.0, 7.0, -1.0, 15.0, -1.0, 23.0 ]\n*/\nfunction zaxpy( N, alpha, x, strideX, y, strideY ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, alpha, x, strideX, ix, y, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default zaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport zaxpy from './zaxpy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( zaxpy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default zaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to scale a double-precision complex floating-point vector by a double-precision complex floating-point constant and add the result to a double-precision complex floating-point vector.\n*\n* @module @stdlib/blas-base-zaxpy\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n* import Complex128 from '@stdlib/complex-float64-ctor';\n* import zaxpy from '@stdlib/blas-base-zaxpy';\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = new Complex128( 2.0, 2.0 );\n*\n* zaxpy( 3, alpha, x, 1, y, 1 );\n* // y => <Complex128Array>[ -1.0, 7.0, -1.0, 15.0, -1.0, 23.0 ]\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n* import Complex128 from '@stdlib/complex-float64-ctor';\n* import zaxpy from '@stdlib/blas-base-zaxpy';\n*\n* var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var y = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var alpha = new Complex128( 2.0, 2.0 );\n*\n* zaxpy.ndarray( 3, alpha, x, 1, 0, y, 1, 0 );\n* // y => <Complex128Array>[ -1.0, 7.0, -1.0, 15.0, -1.0, 23.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils-try-require';\nimport isError from '@stdlib/assert-is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar zaxpy;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tzaxpy = main;\n} else {\n\tzaxpy = tmp;\n}\n\n\n// EXPORTS //\n\nexport default zaxpy;\n\n// exports: { \"ndarray\": \"zaxpy.ndarray\" }\n","export default '/home/runner/work/blas-base-zaxpy/blas-base-zaxpy/lib'"],"names":["zaxpy","N","alpha","x","strideX","offsetX","y","strideY","offsetY","viewX","viewY","sx","sy","ix","iy","re","im","i","dcabs1","real","imag","reinterpret","muladd","ndarray","stride2offset","setReadOnly","tmp","tryRequire","join","require$$0","zaxpy$1","isError","main"],"mappings":";;w1GAuDA,SAASA,EAAOC,EAAGC,EAAOC,EAAGC,EAASC,EAASC,EAAGC,EAASC,GAC1D,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKhB,GAAK,GAAyB,IAApBiB,EAAQhB,GACtB,OAAOI,EAUR,IARAS,EAAKI,EAAMjB,GACXc,EAAKI,EAAMlB,GACXO,EAAQY,EAAalB,EAAG,GACxBO,EAAQW,EAAaf,EAAG,GACxBK,EAAe,EAAVP,EACLQ,EAAe,EAAVL,EACLM,EAAe,EAAVR,EACLS,EAAe,EAAVN,EACCS,EAAI,EAAGA,EAAIhB,EAAGgB,IACnBK,EAAQP,EAAIC,EAAIP,EAAOI,GAAMJ,EAAOI,EAAG,GAAKH,EAAOI,GAAMJ,EAAOI,EAAG,GAAKJ,EAAO,EAAGI,GAClFD,GAAMF,EACNG,GAAMF,EAEP,OAAON,CACR,CCjCA,SAASN,EAAOC,EAAGC,EAAOC,EAAGC,EAASE,EAAGC,GAGxC,OAAOgB,EAAStB,EAAGC,EAAOC,EAAGC,EAFpBoB,EAAevB,EAAGG,GAEeE,EAAGC,EADpCiB,EAAevB,EAAGM,GAE5B,CCzBAkB,EAAAzB,EAAA,UAAAuB,GCuBA,IAQAvB,EACA0B,EAAAC,GAAAC,EATAC,EAAAD,MCpDe,wDD6Df,gBAUAE,EARA9B,EADA+B,EAAAL,GACAM,EAEAN"}