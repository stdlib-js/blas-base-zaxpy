{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/zaxpy.js","../lib/main.js","../lib/index.js","../41203db9f1252fe542771bbdc91cb4"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dcabs1 from '@stdlib/blas-base-dcabs1';\nimport cmul from '@stdlib/complex-float64-base-mul';\nimport cadd from '@stdlib/complex-float64-base-add';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision complex floating-point constant and adds the result to a double-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128} za - scalar constant\n* @param {Complex128Array} zx - first input array\n* @param {integer} strideX - `zx` stride length\n* @param {integer} offsetX - starting index for `zx`\n* @param {Complex128Array} zy - second input array\n* @param {integer} strideY - `zy` stride length\n* @param {integer} offsetY - starting index for `zy`\n* @returns {Complex128Array} second input array\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n* import Complex128 from '@stdlib/complex-float64-ctor';\n* import real from '@stdlib/complex-float64-real';\n* import imag from '@stdlib/complex-float64-imag';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zy = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zaxpy( 3, za, zx, 1, 0, zy, 1, 0 );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns -1.0\n*\n* var im = imag( z );\n* // returns 7.0\n*/\nfunction zaxpy( N, za, zx, strideX, offsetX, zy, strideY, offsetY ) {\n\tvar ix;\n\tvar iy;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn zy;\n\t}\n\tif ( dcabs1( za ) === 0.0 ) {\n\t\treturn zy;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tzy.set( cadd( cmul( za, zx.get( ix ) ), zy.get( iy ) ), iy );\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn zy;\n}\n\n\n// EXPORTS //\n\nexport default zaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision complex floating-point constant and adds the result to a double-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128} za - scalar constant\n* @param {Complex128Array} zx - first input array\n* @param {integer} strideX - `zx` stride length\n* @param {Complex128Array} zy - second input array\n* @param {integer} strideY - `zy` stride length\n* @returns {Complex128Array} second input array\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n* import Complex128 from '@stdlib/complex-float64-ctor';\n* import real from '@stdlib/complex-float64-real';\n* import imag from '@stdlib/complex-float64-imag';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zy = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zaxpy( 3, za, zx, 1, zy, 1 );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns -1.0\n*\n* var im = imag( z );\n* // returns 7.0\n*/\nfunction zaxpy( N, za, zx, strideX, zy, strideY ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, za, zx, strideX, ix, zy, strideY, iy );\n}\n\n\n// EXPORTS //\n\nexport default zaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport zaxpy from './zaxpy.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( zaxpy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default zaxpy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to scale a double-precision complex floating-point vector by a double-precision complex floating-point constant and add the result to a double-precision complex floating-point vector.\n*\n* @module @stdlib/blas-base-zaxpy\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n* import Complex128 from '@stdlib/complex-float64-ctor';\n* import real from '@stdlib/complex-float64-real';\n* import imag from '@stdlib/complex-float64-imag';\n* import zaxpy from '@stdlib/blas-base-zaxpy';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zy = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zaxpy( 3, za, zx, 1, zy, 1 );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns -1.0\n*\n* var im = imag( z );\n* // returns 7.0\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n* import Complex128 from '@stdlib/complex-float64-ctor';\n* import real from '@stdlib/complex-float64-real';\n* import imag from '@stdlib/complex-float64-imag';\n* import zaxpy from '@stdlib/blas-base-zaxpy';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zy = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zaxpy.ndarray( 3, za, zx, 1, 0, zy, 1, 0 );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns -1.0\n*\n* var im = imag( z );\n* // returns 7.0\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nimport tryRequire from '@stdlib/utils-try-require';\nimport isError from '@stdlib/assert-is-error';\nimport main from './main.js';\n\n\n// MAIN //\n\nvar zaxpy;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tzaxpy = main;\n} else {\n\tzaxpy = tmp;\n}\n\n\n// EXPORTS //\n\nexport default zaxpy;\n\n// exports: { \"ndarray\": \"zaxpy.ndarray\" }\n","export default '/home/runner/work/blas-base-zaxpy/blas-base-zaxpy/lib'"],"names":["zaxpy","N","za","zx","strideX","offsetX","zy","strideY","offsetY","ix","iy","i","dcabs1","set","cadd","cmul","get","ndarray","stride2offset","setReadOnly","tmp","tryRequire","join","require$$0","zaxpy$1","isError","main"],"mappings":";;woGA+DA,SAASA,EAAOC,EAAGC,EAAIC,EAAIC,EAASC,EAASC,EAAIC,EAASC,GACzD,IAAIC,EACAC,EACAC,EAEJ,GAAKV,GAAK,EACT,OAAOK,EAER,GAAsB,IAAjBM,EAAQV,GACZ,OAAOI,EAIR,IAFAG,EAAKJ,EACLK,EAAKF,EACCG,EAAI,EAAGA,EAAIV,EAAGU,IACnBL,EAAGO,IAAKC,EAAMC,EAAMb,EAAIC,EAAGa,IAAKP,IAAQH,EAAGU,IAAKN,IAAQA,GACxDD,GAAML,EACNM,GAAMH,EAEP,OAAOD,CACR,CCtBA,SAASN,EAAOC,EAAGC,EAAIC,EAAIC,EAASE,EAAIC,GAGvC,OAAOU,EAAShB,EAAGC,EAAIC,EAAIC,EAFlBc,EAAejB,EAAGG,GAEaE,EAAIC,EADnCW,EAAejB,EAAGM,GAE5B,CCnCAY,EAAAnB,EAAA,UAAAiB,GC2CA,IAQAjB,EACAoB,EAAAC,GAAAC,EATAC,EAAAD,MCxEe,wDDiFf,gBAUAE,EARAxB,EADAyB,EAAAL,GACAM,EAEAN"}