{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/zaxpy.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar reinterpret = require( '@stdlib/strided-base-reinterpret-complex128' );\nvar muladd = require( '@stdlib/complex-float64-base-mul-add' ).assign;\nvar real = require( '@stdlib/complex-float64-real' );\nvar imag = require( '@stdlib/complex-float64-imag' );\nvar dcabs1 = require( '@stdlib/blas-base-dcabs1' );\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision complex floating-point constant and adds the result to a double-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128} za - scalar constant\n* @param {Complex128Array} zx - first input array\n* @param {integer} strideX - `zx` stride length\n* @param {integer} offsetX - starting index for `zx`\n* @param {Complex128Array} zy - second input array\n* @param {integer} strideY - `zy` stride length\n* @param {integer} offsetY - starting index for `zy`\n* @returns {Complex128Array} second input array\n*\n* @example\n* var Complex128Array = require( '@stdlib/array-complex128' );\n* var Complex128 = require( '@stdlib/complex-float64-ctor' );\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zy = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zaxpy( 3, za, zx, 1, 0, zy, 1, 0 );\n* // zy => <Complex128Array>[ -1.0, 7.0, -1.0, 15.0, -1.0, 23.0 ]\n*/\nfunction zaxpy( N, za, zx, strideX, offsetX, zy, strideY, offsetY ) {\n\tvar viewX;\n\tvar viewY;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar re;\n\tvar im;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn zy;\n\t}\n\tif ( dcabs1( za ) === 0.0 ) {\n\t\treturn zy;\n\t}\n\tre = real( za );\n\tim = imag( za );\n\tviewX = reinterpret( zx, 0 );\n\tviewY = reinterpret( zy, 0 );\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tmuladd( re, im, viewX[ ix ], viewX[ ix+1 ], viewY[ iy ], viewY[ iy+1 ], viewY, 1, iy ); // eslint-disable-line max-len\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn zy;\n}\n\n\n// EXPORTS //\n\nmodule.exports = zaxpy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Scales a double-precision complex floating-point vector by a double-precision complex floating-point constant and adds the result to a double-precision complex floating-point vector.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128} za - scalar constant\n* @param {Complex128Array} zx - first input array\n* @param {integer} strideX - `zx` stride length\n* @param {Complex128Array} zy - second input array\n* @param {integer} strideY - `zy` stride length\n* @returns {Complex128Array} second input array\n*\n* @example\n* var Complex128Array = require( '@stdlib/array-complex128' );\n* var Complex128 = require( '@stdlib/complex-float64-ctor' );\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zy = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zaxpy( 3, za, zx, 1, zy, 1 );\n* // zy => <Complex128Array>[ -1.0, 7.0, -1.0, 15.0, -1.0, 23.0 ]\n*/\nfunction zaxpy( N, za, zx, strideX, zy, strideY ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, za, zx, strideX, ix, zy, strideY, iy );\n}\n\n\n// EXPORTS //\n\nmodule.exports = zaxpy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar zaxpy = require( './zaxpy.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( zaxpy, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = zaxpy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to scale a double-precision complex floating-point vector by a double-precision complex floating-point constant and add the result to a double-precision complex floating-point vector.\n*\n* @module @stdlib/blas-base-zaxpy\n*\n* @example\n* var Complex128Array = require( '@stdlib/array-complex128' );\n* var Complex128 = require( '@stdlib/complex-float64-ctor' );\n* var zaxpy = require( '@stdlib/blas-base-zaxpy' );\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zy = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zaxpy( 3, za, zx, 1, zy, 1 );\n* // zy => <Complex128Array>[ -1.0, 7.0, -1.0, 15.0, -1.0, 23.0 ]\n*\n* @example\n* var Complex128Array = require( '@stdlib/array-complex128' );\n* var Complex128 = require( '@stdlib/complex-float64-ctor' );\n* var zaxpy = require( '@stdlib/blas-base-zaxpy' );\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var zy = new Complex128Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n* var za = new Complex128( 2.0, 2.0 );\n*\n* zaxpy.ndarray( 3, za, zx, 1, 0, zy, 1, 0 );\n* // zy => <Complex128Array>[ -1.0, 7.0, -1.0, 15.0, -1.0, 23.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar zaxpy;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tzaxpy = main;\n} else {\n\tzaxpy = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = zaxpy;\n\n// exports: { \"ndarray\": \"zaxpy.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,6CAA8C,EACrEC,EAAS,QAAS,sCAAuC,EAAE,OAC3DC,EAAO,QAAS,8BAA+B,EAC/CC,EAAO,QAAS,8BAA+B,EAC/CC,EAAS,QAAS,0BAA2B,EA6BjD,SAASC,EAAOC,EAAGC,EAAIC,EAAIC,EAASC,EAASC,EAAIC,EAASC,EAAU,CACnE,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAKJ,GAHKhB,GAAK,GAGLF,EAAQG,CAAG,IAAM,EACrB,OAAOI,EAUR,IARAS,EAAKlB,EAAMK,CAAG,EACdc,EAAKlB,EAAMI,CAAG,EACdO,EAAQd,EAAaQ,EAAI,CAAE,EAC3BO,EAAQf,EAAaW,EAAI,CAAE,EAC3BK,EAAKP,EAAU,EACfQ,EAAKL,EAAU,EACfM,EAAKR,EAAU,EACfS,EAAKN,EAAU,EACTS,EAAI,EAAGA,EAAIhB,EAAGgB,IACnBrB,EAAQmB,EAAIC,EAAIP,EAAOI,CAAG,EAAGJ,EAAOI,EAAG,CAAE,EAAGH,EAAOI,CAAG,EAAGJ,EAAOI,EAAG,CAAE,EAAGJ,EAAO,EAAGI,CAAG,EACrFD,GAAMF,EACNG,GAAMF,EAEP,OAAON,CACR,CAKAZ,EAAO,QAAUM,IC3FjB,IAAAkB,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAU,IA2Bd,SAASC,EAAOC,EAAGC,EAAIC,EAAIC,EAASC,EAAIC,EAAU,CACjD,IAAIC,EAAKT,EAAeG,EAAGG,CAAQ,EAC/BI,EAAKV,EAAeG,EAAGK,CAAQ,EACnC,OAAOP,EAASE,EAAGC,EAAIC,EAAIC,EAASG,EAAIF,EAAIC,EAASE,CAAG,CACzD,CAKAX,EAAO,QAAUG,IC3DjB,IAAAS,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAQ,IACRC,EAAU,IAKdF,EAAaC,EAAO,UAAWC,CAAQ,EAKvCH,EAAO,QAAUE,ICkBjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAAQD,EAERC,EAAQC,EAMT,OAAO,QAAUD",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "reinterpret", "muladd", "real", "imag", "dcabs1", "zaxpy", "N", "za", "zx", "strideX", "offsetX", "zy", "strideY", "offsetY", "viewX", "viewY", "sx", "sy", "ix", "iy", "re", "im", "i", "require_zaxpy", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "zaxpy", "N", "za", "zx", "strideX", "zy", "strideY", "ix", "iy", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "zaxpy", "ndarray", "join", "tryRequire", "isError", "main", "zaxpy", "tmp"]
}
